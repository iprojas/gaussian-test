{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/SplatBuffer.js","../src/Util.js","../src/SplatCompressor.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/SplatMesh.js","../src/Constants.js","../src/worker/SortWorker.js","../src/worker/sorter.wasm","../src/Viewer.js","../src/DropInViewer.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\nlet fbf;\r\n\r\n/**\r\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\r\n */\r\nexport class SplatBuffer {\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerScale: 12,\r\n            BytesPerColor: 4,\r\n            BytesPerRotation: 16,\r\n            ScaleRange: 1\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerColor: 4,\r\n            BytesPerRotation: 8,\r\n            ScaleRange: 32767\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n    static CovarianceSizeBytes = 24;\r\n\r\n    static HeaderSizeBytes = 1024;\r\n\r\n    constructor(bufferData) {\r\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\r\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\r\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\r\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n        this.versionMajor = this.headerArrayUint8[0];\r\n        this.versionMinor = this.headerArrayUint8[1];\r\n        this.headerExtraK = this.headerArrayUint8[2];\r\n        this.compressionLevel = this.headerArrayUint8[3];\r\n        this.splatCount = this.headerArrayUint32[1];\r\n        this.bucketSize = this.headerArrayUint32[2];\r\n        this.bucketCount = this.headerArrayUint32[3];\r\n        this.bucketBlockSize = this.headerArrayFloat32[4];\r\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\r\n        this.bytesPerBucket = this.headerArrayUint32[5];\r\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\r\n\r\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\r\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\r\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\r\n\r\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n\r\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\r\n\r\n        fbf = this.fbf.bind(this);\r\n\r\n        this.linkBufferArrays();\r\n    }\r\n\r\n    linkBufferArrays() {\r\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\r\n        this.centerArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.CenterComponentCount);\r\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerCenter * this.splatCount,\r\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\r\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerCenter + this.bytesPerScale) * this.splatCount,\r\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\r\n        this.rotationArray = new FloatArray(this.splatBufferData,\r\n                                             (this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\r\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\r\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\r\n    }\r\n\r\n    fbf(f) {\r\n        if (this.compressionLevel === 0) {\r\n            return f;\r\n        } else {\r\n            return THREE.DataUtils.fromHalfFloat(f);\r\n        }\r\n    };\r\n\r\n    getHeaderBufferData() {\r\n        return this.headerBufferData;\r\n    }\r\n\r\n    getSplatBufferData() {\r\n        return this.splatBufferData;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    getSplatCenter(index, outCenter, transform) {\r\n        let bucket = [0, 0, 0];\r\n        const centerBase = index * SplatBuffer.CenterComponentCount;\r\n        if (this.compressionLevel > 0) {\r\n            const sf = this.compressionScaleFactor;\r\n            const sr = this.compressionScaleRange;\r\n            const bucketIndex = Math.floor(index / this.bucketSize);\r\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\r\n            outCenter.x = (this.centerArray[centerBase] - sr) * sf + bucket[0];\r\n            outCenter.y = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\r\n            outCenter.z = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\r\n        } else {\r\n            outCenter.x = this.centerArray[centerBase];\r\n            outCenter.y = this.centerArray[centerBase + 1];\r\n            outCenter.z = this.centerArray[centerBase + 2];\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n    }\r\n\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n\r\n        return function(index, outScale, outRotation, transform) {\r\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\r\n            outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\r\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\r\n            outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\r\n                            fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\r\n            if (transform) {\r\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatColor(index, outColor, transform) {\r\n        const colorBase = index * SplatBuffer.ColorComponentCount;\r\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\r\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\r\n        // TODO: apply transform for spherical harmonics\r\n    }\r\n\r\n    fillSplatCenterArray(outCenterArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n        let bucket = [0, 0, 0];\r\n        const center = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const centerSrcBase = i * SplatBuffer.CenterComponentCount;\r\n            const centerDestBase = (i + destOffset) * SplatBuffer.CenterComponentCount;\r\n            if (this.compressionLevel > 0) {\r\n                const bucketIndex = Math.floor(i / this.bucketSize);\r\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\r\n                const sf = this.compressionScaleFactor;\r\n                const sr = this.compressionScaleRange;\r\n                center.x = (this.centerArray[centerSrcBase] - sr) * sf + bucket[0];\r\n                center.y = (this.centerArray[centerSrcBase + 1] - sr) * sf + bucket[1];\r\n                center.z = (this.centerArray[centerSrcBase + 2] - sr) * sf + bucket[2];\r\n            } else {\r\n                center.x = this.centerArray[centerSrcBase];\r\n                center.y = this.centerArray[centerSrcBase + 1];\r\n                center.z = this.centerArray[centerSrcBase + 2];\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    fillSplatCovarianceArray(covarianceArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\r\n            scale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\r\n            rotation.set(fbf(this.rotationArray[rotationBase + 1]),\r\n                         fbf(this.rotationArray[rotationBase + 2]),\r\n                         fbf(this.rotationArray[rotationBase + 3]),\r\n                         fbf(this.rotationArray[rotationBase]));\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n            const covBase = SplatBuffer.CovarianceSizeFloats * (i + destOffset);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            covarianceArray[covBase] = transformedCovariance.elements[0];\r\n            covarianceArray[covBase + 1] = transformedCovariance.elements[3];\r\n            covarianceArray[covBase + 2] = transformedCovariance.elements[6];\r\n            covarianceArray[covBase + 3] = transformedCovariance.elements[4];\r\n            covarianceArray[covBase + 4] = transformedCovariance.elements[7];\r\n            covarianceArray[covBase + 5] = transformedCovariance.elements[8];\r\n        }\r\n    }\r\n\r\n    fillSplatColorArray(outColorArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const colorSrcBase = i * SplatBuffer.ColorComponentCount;\r\n            const colorDestBase = (i + destOffset) * SplatBuffer.ColorComponentCount;\r\n            outColorArray[colorDestBase] = this.colorArray[colorSrcBase];\r\n            outColorArray[colorDestBase + 1] = this.colorArray[colorSrcBase + 1];\r\n            outColorArray[colorDestBase + 2] = this.colorArray[colorSrcBase + 2];\r\n            outColorArray[colorDestBase + 3] = this.colorArray[colorSrcBase + 3];\r\n            // TODO: implement application of transform for spherical harmonics\r\n        }\r\n    }\r\n}\r\n","export const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        fetch(path)\r\n        .then(async (data) => {\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (true) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        if (onProgress) {\r\n                            onProgress(100, '100%', chunk);\r\n                        }\r\n                        const buffer = new Blob(chunks).arrayBuffer();\r\n                        resolve(buffer);\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    chunks.push(chunk);\r\n                    if (onProgress) {\r\n                        onProgress(percent, percentLabel, chunk);\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\nimport { clamp } from './Util.js';\r\n\r\nconst SplatBufferBucketSize = 256;\r\nconst SplatBufferBucketBlockSize = 5.0;\r\n\r\nclass UncompressedSplatArray {\r\n\r\n    constructor() {\r\n        this.splatCount = 0;\r\n        this.scale_0 = [];\r\n        this.scale_1 = [];\r\n        this.scale_2 = [];\r\n        this.rot_0 = [];\r\n        this.rot_1 = [];\r\n        this.rot_2 = [];\r\n        this.rot_3 = [];\r\n        this.x = [];\r\n        this.y = [];\r\n        this.z = [];\r\n        this.f_dc_0 = [];\r\n        this.f_dc_1 = [];\r\n        this.f_dc_2 = [];\r\n        this.opacity = [];\r\n    }\r\n\r\n    addSplat(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\r\n        this.x.push(x);\r\n        this.y.push(y);\r\n        this.z.push(z);\r\n        this.scale_0.push(scale0);\r\n        this.scale_1.push(scale1);\r\n        this.scale_2.push(scale2);\r\n        this.rot_0.push(rot0);\r\n        this.rot_1.push(rot1);\r\n        this.rot_2.push(rot2);\r\n        this.rot_3.push(rot3);\r\n        this.f_dc_0.push(r);\r\n        this.f_dc_1.push(g);\r\n        this.f_dc_2.push(b);\r\n        this.opacity.push(opacity);\r\n        this.splatCount++;\r\n    }\r\n}\r\n\r\nexport class SplatCompressor {\r\n\r\n    constructor(compressionLevel = 0, minimumAlpha = 1, blockSize = SplatBufferBucketBlockSize, bucketSize = SplatBufferBucketSize) {\r\n        this.compressionLevel = compressionLevel;\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.bucketSize = bucketSize;\r\n        this.blockSize = blockSize;\r\n    }\r\n\r\n    static createEmptyUncompressedSplatArray() {\r\n        return new UncompressedSplatArray();\r\n    }\r\n\r\n    uncompressedSplatArrayToSplatBuffer(splatArray) {\r\n\r\n        const validSplats = SplatCompressor.createEmptyUncompressedSplatArray();\r\n        validSplats.addSplat(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0);\r\n\r\n        for (let i = 0; i < splatArray.splatCount; i++) {\r\n            let alpha;\r\n            if (splatArray['opacity'][i]) {\r\n                alpha = splatArray['opacity'][i];\r\n            } else {\r\n                alpha = 255;\r\n            }\r\n            if (alpha >= this.minimumAlpha) {\r\n                validSplats.addSplat(splatArray['x'][i], splatArray['y'][i], splatArray['z'][i],\r\n                                     splatArray['scale_0'][i], splatArray['scale_1'][i], splatArray['scale_2'][i],\r\n                                     splatArray['rot_0'][i], splatArray['rot_1'][i], splatArray['rot_2'][i], splatArray['rot_3'][i],\r\n                                     splatArray['f_dc_0'][i], splatArray['f_dc_1'][i], splatArray['f_dc_2'][i], splatArray['opacity'][i]);\r\n            }\r\n        }\r\n\r\n        const buckets = this.computeBucketsForUncompressedSplatArray(validSplats);\r\n\r\n        const paddedSplatCount = buckets.length * this.bucketSize;\r\n        const headerSize = SplatBuffer.HeaderSizeBytes;\r\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\r\n        header[3] = this.compressionLevel;\r\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\r\n\r\n        let bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        let bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        let bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        let bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n        const centerBuffer = new ArrayBuffer(bytesPerCenter * paddedSplatCount);\r\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\r\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\r\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\r\n\r\n        const blockHalfSize = this.blockSize / 2.0;\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\r\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n\r\n        const bucketCenter = new THREE.Vector3();\r\n        const bucketCenterDelta = new THREE.Vector3();\r\n        let outSplatIndex = 0;\r\n        for (let b = 0; b < buckets.length; b++) {\r\n            const bucket = buckets[b];\r\n            bucketCenter.fromArray(bucket.center);\r\n            for (let i = 0; i < bucket.splats.length; i++) {\r\n                let row = bucket.splats[i];\r\n                let invalidSplat = false;\r\n                if (row === 0) {\r\n                    invalidSplat = true;\r\n                }\r\n\r\n                if (this.compressionLevel === 0) {\r\n                    const center = new Float32Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\r\n                    const scale = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\r\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\r\n                    if (validSplats['scale_0'][row] !== undefined) {\r\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\r\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\r\n                        quat.normalize();\r\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\r\n                        scale.set([validSplats['scale_0'][row], validSplats['scale_1'][row], validSplats['scale_2'][row]]);\r\n                    } else {\r\n                        scale.set([0.01, 0.01, 0.01]);\r\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\r\n                    }\r\n                    center.set([validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]]);\r\n                } else {\r\n                    const center = new Uint16Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\r\n                    const scale = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\r\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\r\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n                    if (validSplats['scale_0'][row] !== undefined) {\r\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\r\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\r\n                        quat.normalize();\r\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\r\n                        scale.set([thf(validSplats['scale_0'][row]), thf(validSplats['scale_1'][row]), thf(validSplats['scale_2'][row])]);\r\n                    } else {\r\n                        scale.set([thf(0.01), thf(0.01), thf(0.01)]);\r\n                        rot.set([thf(1.), 0, 0, 0]);\r\n                    }\r\n                    bucketCenterDelta.set(validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]).sub(bucketCenter);\r\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\r\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\r\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\r\n                    center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n                }\r\n\r\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\r\n                if (invalidSplat) {\r\n                    rgba[0] = 255;\r\n                    rgba[1] = 0;\r\n                    rgba[2] = 0;\r\n                    rgba[3] = 0;\r\n                } else {\r\n                    if (validSplats['f_dc_0'][row] !== undefined) {\r\n                        rgba.set([validSplats['f_dc_0'][row], validSplats['f_dc_1'][row], validSplats['f_dc_2'][row]]);\r\n                    } else {\r\n                        rgba.set([255, 0, 0]);\r\n                    }\r\n                    if (validSplats['opacity'][row] !== undefined) {\r\n                        rgba[3] = validSplats['opacity'][row];\r\n                    } else {\r\n                        rgba[3] = 255;\r\n                    }\r\n                }\r\n\r\n                outSplatIndex++;\r\n            }\r\n        }\r\n\r\n        const bytesPerBucket = 12;\r\n        const bucketsSize = bytesPerBucket * buckets.length;\r\n        const splatDataBufferSize = centerBuffer.byteLength + scaleBuffer.byteLength +\r\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\r\n\r\n        const headerArrayUint32 = new Uint32Array(header.buffer);\r\n        const headerArrayFloat32 = new Float32Array(header.buffer);\r\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\r\n        if (this.compressionLevel > 0) {\r\n            unifiedBufferSize += bucketsSize;\r\n            headerArrayUint32[2] = this.bucketSize;\r\n            headerArrayUint32[3] = buckets.length;\r\n            headerArrayFloat32[4] = this.blockSize;\r\n            headerArrayUint32[5] = bytesPerBucket;\r\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        }\r\n\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\r\n        new Uint8Array(unifiedBuffer, headerSize, centerBuffer.byteLength).set(new Uint8Array(centerBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength,\r\n                    colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\r\n                    rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\r\n\r\n        if (this.compressionLevel > 0) {\r\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\r\n            for (let i = 0; i < buckets.length; i++) {\r\n                const bucket = buckets[i];\r\n                const base = i * 3;\r\n                bucketArray[base] = bucket.center[0];\r\n                bucketArray[base + 1] = bucket.center[1];\r\n                bucketArray[base + 2] = bucket.center[2];\r\n            }\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    computeBucketsForUncompressedSplatArray(splatArray) {\r\n        let splatCount = splatArray.splatCount;\r\n        const blockSize = this.blockSize;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        // ignore the first splat since it's the invalid designator\r\n        for (let i = 1; i < splatCount; i++) {\r\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        // ignore the first splat since it's the invalid designator\r\n        for (let i = 1; i < splatCount; i++) {\r\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\r\n            const xBlock = Math.ceil((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.ceil((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.ceil((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= this.bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        // fill partially full buckets with invalid splats (splat 0)\r\n        // to get them up to this.bucketSize\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    while (bucket.splats.length < this.bucketSize) {\r\n                        bucket.splats.push(0);\r\n                    }\r\n                    fullBuckets.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return fullBuckets;\r\n    }\r\n}\r\n","import { SplatCompressor } from './SplatCompressor.js';\r\n\r\nexport class PlyParser {\r\n\r\n    constructor(plyBuffer) {\r\n        this.plyBuffer = plyBuffer;\r\n    }\r\n\r\n    decodeHeader(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n\r\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\r\n\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\r\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n            if (endHeaderTestText.includes('end_header')) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const headerLines = headerText.split('\\n');\r\n\r\n        let splatCount = 0;\r\n        let propertyTypes = {};\r\n\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element vertex')) {\r\n                const splatCountMatch = line.match(/\\d+/);\r\n                if (splatCountMatch) {\r\n                    splatCount = parseInt(splatCountMatch[0]);\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (propertyMatch) {\r\n                    const propertyType = propertyMatch[2];\r\n                    const propertyName = propertyMatch[3];\r\n                    propertyTypes[propertyName] = propertyType;\r\n                }\r\n            } else if (line === 'end_header') {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\r\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\r\n\r\n        return {\r\n            'splatCount': splatCount,\r\n            'propertyTypes': propertyTypes,\r\n            'vertexData': vertexData,\r\n            'headerOffset': headerOffset\r\n        };\r\n    }\r\n\r\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\r\n        let rawVertex = outVertex || {};\r\n        for (let property of propertiesToRead) {\r\n            const propertyType = propertyTypes[property];\r\n            if (propertyType === 'float') {\r\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\r\n            } else if (propertyType === 'uchar') {\r\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize) {\r\n\r\n        const startTime = performance.now();\r\n\r\n        console.log('Parsing PLY to SPLAT...');\r\n\r\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\r\n\r\n        // figure out the SH degree from the number of coefficients\r\n        let nRestCoeffs = 0;\r\n        for (const propertyName in propertyTypes) {\r\n            if (propertyName.startsWith('f_rest_')) {\r\n                nRestCoeffs += 1;\r\n            }\r\n        }\r\n        const nCoeffsPerColor = nRestCoeffs / 3;\r\n\r\n        // TODO: Eventually properly support multiple degree spherical harmonics\r\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\r\n        const sphericalHarmonicsDegree = 0;\r\n\r\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\r\n\r\n        // figure out the order in which spherical harmonics should be read\r\n        const shFeatureOrder = [];\r\n        for (let rgb = 0; rgb < 3; ++rgb) {\r\n            shFeatureOrder.push(`f_dc_${rgb}`);\r\n        }\r\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\r\n            for (let rgb = 0; rgb < 3; ++rgb) {\r\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\r\n            }\r\n        }\r\n\r\n        let plyRowSize = 0;\r\n        let fieldOffsets = {};\r\n        const fieldSize = {\r\n            'double': 8,\r\n            'int': 4,\r\n            'uint': 4,\r\n            'float': 4,\r\n            'short': 2,\r\n            'ushort': 2,\r\n            'uchar': 1,\r\n        };\r\n        for (let fieldName in propertyTypes) {\r\n            if (propertyTypes.hasOwnProperty(fieldName)) {\r\n                const type = propertyTypes[fieldName];\r\n                fieldOffsets[fieldName] = plyRowSize;\r\n                plyRowSize += fieldSize[type];\r\n            }\r\n        }\r\n\r\n        let rawVertex = {};\r\n\r\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\r\n\r\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\r\n\r\n        for (let row = 0; row < splatCount; row++) {\r\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\r\n            if (rawVertex['scale_0'] !== undefined) {\r\n                splatArray['scale_0'][row] = Math.exp(rawVertex['scale_0']);\r\n                splatArray['scale_1'][row] = Math.exp(rawVertex['scale_1']);\r\n                splatArray['scale_2'][row] = Math.exp(rawVertex['scale_2']);\r\n            } else {\r\n                splatArray['scale_0'][row] = 0.01;\r\n                splatArray['scale_1'][row] = 0.01;\r\n                splatArray['scale_2'][row] = 0.01;\r\n            }\r\n\r\n            if (rawVertex['f_dc_0'] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                splatArray['f_dc_0'][row] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\r\n                splatArray['f_dc_1'][row] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\r\n                splatArray['f_dc_2'][row] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\r\n            } else {\r\n                splatArray['f_dc_0'][row] = 0;\r\n                splatArray['f_dc_1'][row] = 0;\r\n                splatArray['f_dc_2'][row] = 0;\r\n            }\r\n            if (rawVertex['opacity'] !== undefined) {\r\n                splatArray['opacity'][row] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\r\n            }\r\n\r\n            splatArray['rot_0'][row] = rawVertex['rot_0'];\r\n            splatArray['rot_1'][row] = rawVertex['rot_1'];\r\n            splatArray['rot_2'][row] = rawVertex['rot_2'];\r\n            splatArray['rot_3'][row] = rawVertex['rot_3'];\r\n\r\n            splatArray['x'][row] = rawVertex['x'];\r\n            splatArray['y'][row] = rawVertex['y'];\r\n            splatArray['z'][row] = rawVertex['z'];\r\n            splatArray.splatCount++;\r\n        }\r\n\r\n        const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\r\n        const splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\r\n\r\n        console.log('Total valid splats: ', splatBuffer.getSplatCount(), 'out of', splatCount);\r\n\r\n        const endTime = performance.now();\r\n\r\n        console.log('Parsing PLY to SPLAT complete!');\r\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\r\n\r\n        return splatBuffer;\r\n    }\r\n\r\n}\r\n","import { PlyParser } from './PlyParser.js';\r\nimport { fetchWithProgress } from './Util.js';\r\n\r\nexport class PlyLoader {\r\n\r\n    constructor() {\r\n        this.splatBuffer = null;\r\n    }\r\n\r\n    fetchFile(fileName, onProgress) {\r\n        return new Promise((resolve, reject) => {\r\n            fetchWithProgress(fileName, onProgress)\r\n            .then((data) => {\r\n                resolve(data);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\r\n        return new Promise((resolve, reject) => {\r\n            const loadPromise = this.fetchFile(fileName, onProgress);\r\n            loadPromise\r\n            .then((plyFileData) => {\r\n                const plyParser = new PlyParser(plyFileData);\r\n                const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize);\r\n                this.splatBuffer = splatBuffer;\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\nimport { SplatCompressor } from './SplatCompressor.js';\r\nimport { fetchWithProgress } from './Util.js';\r\n\r\nexport class SplatLoader {\r\n\r\n    constructor(splatBuffer = null) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.downLoadLink = null;\r\n    }\r\n\r\n    static isFileSplatFormat(fileName) {\r\n        return SplatLoader.isCustomSplatFormat(fileName) || SplatLoader.isStandardSplatFormat(fileName);\r\n    }\r\n\r\n    static isCustomSplatFormat(fileName) {\r\n        return fileName.endsWith('.ksplat');\r\n    }\r\n\r\n    static isStandardSplatFormat(fileName) {\r\n        return fileName.endsWith('.splat');\r\n    }\r\n\r\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\r\n        return new Promise((resolve, reject) => {\r\n            fetchWithProgress(fileName, onProgress)\r\n            .then((bufferData) => {\r\n                let splatBuffer;\r\n                if (SplatLoader.isCustomSplatFormat(fileName)) {\r\n                    splatBuffer = new SplatBuffer(bufferData);\r\n                } else {\r\n                    const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\r\n                    const splatArray = SplatLoader.parseStandardSplatToUncompressedSplatArray(bufferData);\r\n                    splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\r\n                }\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const InBufferRowSizeBytes = 32;\r\n        const splatCount = inBuffer.byteLength / InBufferRowSizeBytes;\r\n\r\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inCenterSizeBytes = 3 * 4;\r\n            const inScaleSizeBytes = 3 * 4;\r\n            const inColorSizeBytes = 4;\r\n            const inBase = i * InBufferRowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + inCenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes + inColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplat(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n    setFromBuffer(splatBuffer) {\r\n        this.splatBuffer = splatBuffer;\r\n    }\r\n\r\n    downloadFile(fileName) {\r\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\r\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\r\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\r\n            type: 'application/octet-stream',\r\n        });\r\n\r\n        if (!this.downLoadLink) {\r\n            this.downLoadLink = document.createElement('a');\r\n            document.body.appendChild(this.downLoadLink);\r\n        }\r\n        this.downLoadLink.download = fileName;\r\n        this.downLoadLink.href = URL.createObjectURL(blob);\r\n        this.downLoadLink.click();\r\n    }\r\n\r\n}\r\n","import {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","export class LoadingSpinner {\r\n\r\n    constructor(message, container) {\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerDivContainerOuter = document.createElement('div');\r\n        this.spinnerDivContainerOuter.className = 'outerContainer';\r\n        this.spinnerDivContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerDivContainer = document.createElement('div');\r\n        this.spinnerDivContainer.className = 'container';\r\n\r\n        this.spinnerDiv = document.createElement('div');\r\n        this.spinnerDiv.className = 'loader';\r\n\r\n        this.messageDiv = document.createElement('div');\r\n        this.messageDiv.className = 'message';\r\n        this.messageDiv.innerHTML = this.message;\r\n\r\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\r\n        this.spinnerDivContainer.appendChild(this.messageDiv);\r\n        this.spinnerDivContainerOuter.appendChild(this.spinnerDivContainer);\r\n        this.container.appendChild(this.spinnerDivContainerOuter);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .message {\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                padding-top:15px;\r\n                width: 180px;\r\n            }\r\n\r\n            .outerContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n            }\r\n\r\n            .container {\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n            }\r\n\r\n            .loader {\r\n                width: 120px;        /* the size */\r\n                padding: 15px;       /* the border thickness */\r\n                background: #07e8d6; /* the color */\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n                margin-left: 30px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerDivContainerOuter.appendChild(style);\r\n    }\r\n\r\n    show() {\r\n        this.spinnerDivContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerDivContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.spinnerDivContainerOuter);\r\n        }\r\n        this.container = container;\r\n        this.container.appendChild(this.spinnerDivContainerOuter);\r\n        this.spinnerDivContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageDiv.innerHTML = msg;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyMaterial = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.scene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            this.meshCursor.children.forEach((child) => {\r\n                child.geometry.dispose();\r\n                child.material.dispose();\r\n            });\r\n            this.scene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            const sphereMesh = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n            this.focusMarker = sphereMesh;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            this.focusMarker.position.copy(tempPosition);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n        planeGeometry.rotateX(-Math.PI / 2);\r\n        const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n        planeMaterial.transparent = true;\r\n        planeMaterial.opacity = 0.6;\r\n        planeMaterial.depthTest = false;\r\n        planeMaterial.depthWrite = false;\r\n        planeMaterial.side = THREE.DoubleSide;\r\n        const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n        const arrowDir = new THREE.Vector3(0, 1, 0);\r\n        arrowDir.normalize();\r\n        const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n        const arrowLength = 0.5;\r\n        const arrowRadius = 0.01;\r\n        const arrowColor = 0x00dd00;\r\n        const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n        this.controlPlane = new THREE.Object3D();\r\n        this.controlPlane.add(planeMesh);\r\n        this.controlPlane.add(arrowHelper);\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.scene.add(this.debugRoot);\r\n        this.scene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n    }\r\n\r\n    set(origin, normal, distance) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction) {\r\n        this.ray = new Ray(origin, direction);\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            fromLocal.copy(splatMesh.matrixWorld);\r\n            toLocal.copy(fromLocal).invert();\r\n            localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n            localRay.direction.copy(this.ray.direction).transformDirection(toLocal);\r\n\r\n            const splatTree = splatMesh.getSplatTree();\r\n            if (splatTree.rootNode) {\r\n                this.castRayAtSplatTreeNode(localRay, splatTree, splatTree.rootNode, outHits);\r\n            }\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n            outHits.forEach((hit) => {\r\n                hit.origin.applyMatrix4(fromLocal);\r\n                hit.normal.transformDirection(fromLocal);\r\n            });\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        // Used for raycasting against splat ellipsoid\r\n        /*\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const tempRotationMatrix = new THREE.Matrix4();\r\n        const tempScaleMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n        */\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\r\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Simple approximated sphere intersection\r\n                    const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\r\n                    if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                        outHits.push(tempHit.clone());\r\n                    }\r\n\r\n                    // Raycast against actual splat ellipsoid ... doesn't actually work as well\r\n                    // as the approximated sphere approach\r\n                    /*\r\n                    splatBuffer.getRotation(splatLocalIndex, tempRotation, splatTransform);\r\n                    tempScaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                    tempRotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                    fromSphereSpace.copy(tempScaleMatrix).premultiply(tempRotationMatrix);\r\n                    toSphereSpace.copy(fromSphereSpace).invert();\r\n                    tempRay.origin.copy(this.ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                    tempRay.direction.copy(this.ray.direction).transformDirection(toSphereSpace).normalize();\r\n                    if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                        const hitClone = tempHit.clone();\r\n                        hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                        outHits.push(hitClone);\r\n                    }\r\n                    */\r\n\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nlet idGen = 0;\r\n\r\nexport class SplatTreeNode {\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || idGen++;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatTreeNode } from './SplatTreeNode.js';\r\n\r\n/**\r\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\r\n */\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.splatMesh = [];\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.addedIndexes = {};\r\n        this.nodesWithIndexes = [];\r\n    }\r\n\r\n    processSplatMesh(splatMesh, filterFunc = () => true) {\r\n        const center = new THREE.Vector3();\r\n        this.splatMesh = splatMesh;\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.addedIndexes = {};\r\n        this.nodesWithIndexes = [];\r\n        this.globalSplatIndexToLocalSplatIndexMap = {};\r\n        this.globalSplatIndexToSplatBufferIndexMap = {};\r\n\r\n        let validSplatCount = 0;\r\n        const indexes = [];\r\n        const splatCount = this.splatMesh.getSplatCount();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            if (filterFunc(i)) {\r\n                this.splatMesh.getSplatCenter(i, center);\r\n                if (validSplatCount === 0 || center.x < this.sceneMin.x) this.sceneMin.x = center.x;\r\n                if (validSplatCount === 0 || center.x > this.sceneMax.x) this.sceneMax.x = center.x;\r\n                if (validSplatCount === 0 || center.y < this.sceneMin.y) this.sceneMin.y = center.y;\r\n                if (validSplatCount === 0 || center.y > this.sceneMax.y) this.sceneMax.y = center.y;\r\n                if (validSplatCount === 0 || center.z < this.sceneMin.z) this.sceneMin.z = center.z;\r\n                if (validSplatCount === 0 || center.z > this.sceneMax.z) this.sceneMax.z = center.z;\r\n                validSplatCount++;\r\n                indexes.push(i);\r\n            }\r\n        }\r\n\r\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\r\n\r\n        this.rootNode = new SplatTreeNode(this.sceneMin, this.sceneMax, 0);\r\n        this.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n        this.processNode(this.rootNode, splatMesh);\r\n    }\r\n\r\n    processNode(node, splatMesh) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < this.maxCentersPerNode || node.depth > this.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!this.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    this.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            this.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\r\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\r\n\r\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\r\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\r\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            this.splatMesh.getSplatCenter(splatGlobalIndex, center);\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            this.processNode(child, splatMesh);\r\n        }\r\n    }\r\n\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        return visitLeavesFromNode(this.rootNode, visitFunc);\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatTree } from './splattree/SplatTree.js';\r\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\r\n\r\nconst dummyGeometry = new THREE.BufferGeometry();\r\n\r\n/**\r\n * SplatMesh: Container for one or more SplatBuffer instances, abstracting them into a single unified container for\r\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\r\n */\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true) {\r\n        super(dummyGeometry, null);\r\n        this.renderer = undefined;\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n        this.devicePixelRatio = devicePixelRatio;\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n        this.splatBuffers = [];\r\n        this.splatBufferOptions = [];\r\n        this.splatBufferTransforms = [];\r\n        this.splatTree = null;\r\n        this.splatDataTextures = null;\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n        };\r\n        this.globalSplatIndexToLocalSplatIndexMap = {};\r\n        this.globalSplatIndexToSplatBufferIndexMap = {};\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats scene.\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static buildMaterial() {\r\n\r\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\r\n        // 2D covariance) that is ultimately rasterized.\r\n        const vertexShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            attribute uint splatIndex;\r\n\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D centersColorsTexture;\r\n            uniform vec2 focal;\r\n            uniform vec2 viewport;\r\n            uniform vec2 basisViewport;\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform vec2 centersColorsTextureSize;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n            vec4 uintToRGBAVec (uint u) {\r\n               uvec4 urgba = mask4 & u;\r\n               urgba = urgba >> shift4;\r\n               vec4 rgba = vec4(urgba) * encodeNorm4;\r\n               return rgba;\r\n            }\r\n\r\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n                samplerUV.y = float(floor(d)) / dimensions.y;\r\n                samplerUV.x = fract(d);\r\n                return samplerUV;\r\n            }\r\n\r\n            void main () {\r\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\r\n                vColor = uintToRGBAVec(sampledCenterColor.r);\r\n\r\n                vPosition = position.xy * 2.0;\r\n\r\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\r\n                vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\r\n\r\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\r\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\r\n\r\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\r\n                mat3 Vrk = mat3(\r\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n                );\r\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                mat3 J = mat3(\r\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                    0., 0., 0.\r\n                );\r\n                mat3 W = transpose(mat3(modelViewMatrix));\r\n                mat3 T = W * J;\r\n                mat3 cov2Dm = transpose(T) * Vrk * T;\r\n                cov2Dm[0][0] += 0.3;\r\n                cov2Dm[1][1] += 0.3;\r\n\r\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n                // need cov2Dm[1][0] because it is a symetric matrix.\r\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n                // so that we can determine the 2D basis for the splat. This is done using the method described\r\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n                //\r\n                // This is a different approach than in the original work at INRIA. In that work they compute the\r\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\r\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\r\n                // matrix (called 'conic') to determine fragment opacity.\r\n                float a = cov2Dv.x;\r\n                float d = cov2Dv.z;\r\n                float b = cov2Dv.y;\r\n                float D = a * d - b * b;\r\n                float trace = a + d;\r\n                float traceOver2 = 0.5 * trace;\r\n                float term2 = sqrt(trace * trace / 4.0 - D);\r\n                float eigenValue1 = traceOver2 + term2;\r\n                float eigenValue2 = max(traceOver2 - term2, 0.00); // prevent negative eigen value\r\n\r\n                const float maxSplatSize = 1024.0;\r\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n                // since the eigen vectors are orthogonal, we derive the second one from the first\r\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\r\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\r\n\r\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport;\r\n\r\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n            }`;\r\n\r\n        const fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            void main () {\r\n                // compute the negative squared distance from the center of the splat to the\r\n                // current fragment in the splat's local space.\r\n                float A = -dot(vPosition, vPosition);\r\n                if (A < -4.0) discard;\r\n                vec3 color = vColor.rgb;\r\n                A = exp(A) * vColor.a;\r\n                gl_FragColor = vec4(color.rgb, A);\r\n            }`;\r\n\r\n        const uniforms = {\r\n            'covariancesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'covariancesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js geometry that will be used to render the splats scene. The geometry is instanced and is made up of\r\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\r\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\r\n     * @return {THREE.InstancedBufferGeometry}\r\n     */\r\n    static buildGeomtery(maxSplatCount) {\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        // Vertices for the instanced quad\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        // Splat index buffer\r\n        const splatIndexArray = new Uint32Array(maxSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = maxSplatCount;\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Build a Three.js transformation matrix for each splat buffer based on options (position, scale, rotation)\r\n     * passed to the splat mesh during the build process. These are all optional and allow for the customization of\r\n     * a given splat buffer's position, scale, and orientation relative to the others.\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position.\r\n     *                                     Defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion.\r\n     *                                     Defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {Array<THREE.Matrix4>} splatBufferTransforms Existing transforms, if there are any\r\n     * @return {Array<THREE.Matrix4>}\r\n     */\r\n    static buildSplatBufferTransforms(splatBufferOptions, splatBufferTransforms = null) {\r\n        splatBufferTransforms = splatBufferTransforms || [];\r\n        splatBufferTransforms.length = splatBufferOptions.length;\r\n        for (let i = 0; i < splatBufferOptions.length; i++) {\r\n            if (!splatBufferTransforms[i]) {\r\n                const options = splatBufferOptions[i];\r\n                if (options) {\r\n                    let positionArray = options['position'] || [0, 0, 0];\r\n                    let rotationArray = options['rotation'] || [0, 0, 0, 1];\r\n                    let scaleArray = options['scale'] || [1, 1, 1];\r\n                    const position = new THREE.Vector3().fromArray(positionArray);\r\n                    const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n                    const scale = new THREE.Vector3().fromArray(scaleArray);\r\n                    const splatBufferTransform = new THREE.Matrix4();\r\n                    splatBufferTransform.compose(position, rotation, scale);\r\n                    splatBufferTransforms[i] = splatBufferTransform;\r\n                }\r\n            }\r\n        }\r\n        return splatBufferTransforms;\r\n    }\r\n\r\n    /**\r\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\r\n     * local data within a single splat buffer.\r\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\r\n     * @return {object}\r\n     */\r\n    static buildSplatIndexMaps(splatBuffers) {\r\n        const localSplatIndexMap = new Map();\r\n        const splatBufferIndexMap = new Map();\r\n        let totalSplatCount = 0;\r\n        for (let s = 0; s < splatBuffers.length; s++) {\r\n            const splatBuffer = splatBuffers[s];\r\n            const splatCount = splatBuffer.getSplatCount();\r\n            for (let i = 0; i < splatCount; i++) {\r\n                localSplatIndexMap[totalSplatCount] = i;\r\n                splatBufferIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n        return {\r\n            localSplatIndexMap,\r\n            splatBufferIndexMap\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance for which the splat tree will be built\r\n     * @return {SplatTree}\r\n     */\r\n    static buildSplatTree(splatMesh) {\r\n        // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\r\n        // be configured on a per-scene basis\r\n        const splatTree = new SplatTree(8, 1000);\r\n        console.time('SplatTree build');\r\n        const splatColor = new THREE.Vector4();\r\n        splatTree.processSplatMesh(splatMesh, (splatIndex) => {\r\n            splatMesh.getSplatColor(splatIndex, splatColor);\r\n            const splatBufferIndex = splatMesh.getSplatBufferIndexForSplat(splatIndex);\r\n            const splatBufferOptions = splatMesh.splatBufferOptions[splatBufferIndex];\r\n            return splatColor.w > (splatBufferOptions.splatAlphaRemovalThreshold || 1);\r\n        });\r\n        console.timeEnd('SplatTree build');\r\n\r\n        let leavesWithVertices = 0;\r\n        let avgSplatCount = 0;\r\n        let maxSplatCount = 0;\r\n        let nodeCount = 0;\r\n\r\n        splatTree.visitLeaves((node) => {\r\n            const nodeSplatCount = node.data.indexes.length;\r\n            if (nodeSplatCount > 0) {\r\n                avgSplatCount += nodeSplatCount;\r\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                nodeCount++;\r\n                leavesWithVertices++;\r\n            }\r\n        });\r\n        console.log(`SplatTree leaves: ${splatTree.countLeaves()}`);\r\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n        avgSplatCount = avgSplatCount / nodeCount;\r\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n        return splatTree;\r\n    }\r\n\r\n    /**\r\n     * Construct this instance of SplatMesh.\r\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\r\n     * @param {Array<object>} splatBufferOptions Dynamic options for each splat buffer {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255). Defaults to 1.\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position.\r\n     *                                     Defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion.\r\n     *                                     Defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     * }\r\n     * @param {Boolean} keepExistingSplatBufferTransforms If the transform for a splat buffer has been changed since a\r\n     *                                                    previous call to build(), this flag says to preserve it. The assumption\r\n     *                                                    is that the current call to build() will be using the same splat buffers\r\n     *                                                    as the previous call.\r\n     */\r\n    build(splatBuffers, splatBufferOptions, keepExistingSplatBufferTransforms = true) {\r\n        this.disposeMeshData();\r\n        const totalSplatCount = SplatMesh.getTotalSplatCountForSplatBuffers(splatBuffers);\r\n        this.splatBufferTransforms = SplatMesh.buildSplatBufferTransforms(splatBufferOptions, keepExistingSplatBufferTransforms ?\r\n                                                                          this.splatBufferTransforms : null);\r\n        this.geometry = SplatMesh.buildGeomtery(totalSplatCount);\r\n        this.material = SplatMesh.buildMaterial();\r\n        const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\r\n        this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\r\n        this.globalSplatIndexToSplatBufferIndexMap = indexMaps.splatBufferIndexMap;\r\n        this.splatTree = SplatMesh.buildSplatTree(this);\r\n\r\n        this.splatBuffers = splatBuffers;\r\n        this.splatBufferOptions = splatBufferOptions;\r\n\r\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\r\n        this.resetDataFromSplatBuffer();\r\n    }\r\n\r\n    /**\r\n     * Dispose all resources held by the splat mesh\r\n     */\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.disposeDistancesComputationGPUResources();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\r\n     */\r\n    disposeMeshData() {\r\n        if (this.geometry && this.geometry !== dummyGeometry) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n        this.splatTree = null;\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\r\n     */\r\n    resetDataFromSplatBuffer() {\r\n        this.uploadSplatDataToTextures();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.updateGPUCentersBufferForDistancesComputation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures with data from the splat buffers for this mesh.\r\n     */\r\n    uploadSplatDataToTextures() {\r\n\r\n        const splatCount = this.getSplatCount();\r\n\r\n        const covariances = new Float32Array(splatCount * 6);\r\n        const centers = new Float32Array(splatCount * 3);\r\n        const colors = new Uint8Array(splatCount * 4);\r\n        this.fillSplatDataArrays(covariances, centers, colors);\r\n\r\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\r\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\n\r\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\r\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\r\n            covariancesTextureSize.y *= 2;\r\n        }\r\n\r\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\r\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\r\n            centersColorsTextureSize.y *= 2;\r\n        }\r\n\r\n        let covariancesTexture;\r\n        let paddedCovariances;\r\n        if (this.halfPrecisionCovariancesOnGPU) {\r\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            for (let i = 0; i < covariances.length; i++) {\r\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(covariances[i]);\r\n            }\r\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\r\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\r\n        } else {\r\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            paddedCovariances.set(covariances);\r\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\r\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\r\n        }\r\n        covariancesTexture.needsUpdate = true;\r\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\r\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\r\n\r\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\r\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n        for (let c = 0; c < splatCount; c++) {\r\n            const colorsBase = c * 4;\r\n            const centersBase = c * 3;\r\n            const centerColorsBase = c * 4;\r\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(colors[colorsBase], colors[colorsBase + 1],\r\n                                                                 colors[colorsBase + 2], colors[colorsBase + 3]);\r\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\r\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\r\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\r\n        }\r\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\r\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n        centersColorsTexture.internalFormat = 'RGBA32UI';\r\n        centersColorsTexture.needsUpdate = true;\r\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\r\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n\r\n        this.splatDataTextures = {\r\n            'covariances': {\r\n                'data': paddedCovariances,\r\n                'texture': covariancesTexture,\r\n                'size': covariancesTextureSize\r\n            },\r\n            'centerColors': {\r\n                'data': paddedCenterColors,\r\n                'texture': centersColorsTexture,\r\n                'size': centersColorsTextureSize\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\r\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\r\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\r\n     *                                  every splat.\r\n     */\r\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n        geometry.attributes.splatIndex.set(globalIndexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n        geometry.instanceCount = renderSplatCount;\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(2.0 / viewport.x, 2.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return SplatMesh.getTotalSplatCountForSplatBuffers(this.splatBuffers);\r\n    }\r\n\r\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeDistancesComputationGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeDistancesComputationGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeDistancesComputationGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesComputationTransformFeedback();\r\n                this.updateGPUCentersBufferForDistancesComputation();\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesComputationTransformFeedback = function() {\r\n\r\n        let currentRenderer;\r\n        let currentSplatCount;\r\n\r\n        return function() {\r\n            const splatCount = this.getSplatCount();\r\n\r\n            if (!this.renderer || (currentRenderer === this.renderer && currentSplatCount === splatCount)) return;\r\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\r\n            const rebuildBuffers = currentSplatCount !== splatCount;\r\n            if (rebuildGPUObjects) {\r\n                this.disposeDistancesComputationGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeDistancesComputationGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            const vsSource =\r\n            `#version 300 es\r\n                in ivec3 center;\r\n                uniform ivec3 modelViewProj;\r\n                flat out int distance;\r\n                void main(void) {\r\n                    distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                }\r\n            `;\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc =\r\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            this.distancesTransformFeedback.modelViewProjLoc =\r\n                gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, splatCount * 4, gl.DYNAMIC_COPY);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            currentRenderer = this.renderer;\r\n            currentSplatCount = splatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the splat buffers for this mesh.\r\n     */\r\n    updateGPUCentersBufferForDistancesComputation() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const intCenters = this.getIntegerCenters(false);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, intCenters, gl.STATIC_DRAW);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    computeDistancesOnGPU(modelViewProjMatrix, outComputedDistances) {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\r\n        const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n\r\n        // console.time(\"gpu_compute_distances\");\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n        gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n        gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n        gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n        gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\r\n\r\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n        gl.beginTransformFeedback(gl.POINTS);\r\n        gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n        gl.endTransformFeedback();\r\n\r\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n        gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n        gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n        if (currentProgram) gl.useProgram(currentProgram);\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n    }\r\n\r\n    /**\r\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\r\n     * buffer, and the corresponding transform)\r\n     * @param {number} globalIndex Global splat index\r\n     * @param {object} paramsObj Object in which to store local data\r\n     */\r\n    getLocalSplatParameters(globalIndex, paramsObj) {\r\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\r\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\r\n        paramsObj.splatBufferTransform = this.getSplatBufferTransformForSplat(globalIndex);\r\n    }\r\n\r\n    /**\r\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\r\n     * @param {Float32Array} covariances Target storage for splat covariances\r\n     * @param {Float32Array} centers Target storage for splat centers\r\n     * @param {Uint8Array} colors Target storage for splat colors\r\n     */\r\n    fillSplatDataArrays(covariances, centers, colors) {\r\n        let offset = 0;\r\n        for (let i = 0; i < this.splatBuffers.length; i++) {\r\n            const splatBuffer = this.splatBuffers[i];\r\n            const splatBufferTransform = this.splatBufferTransforms[i];\r\n            if (covariances) splatBuffer.fillSplatCovarianceArray(covariances, offset, splatBufferTransform);\r\n            if (centers) splatBuffer.fillSplatCenterArray(centers, offset, splatBufferTransform);\r\n            if (colors) splatBuffer.fillSplatColorArray(colors, offset, splatBufferTransform);\r\n            offset += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\r\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\r\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values.\r\n     * @return {Int32Array}\r\n     */\r\n    getIntegerCenters(padFour) {\r\n        const splatCount = this.getSplatCount();\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(splatCount * componentCount);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n    /**\r\n     * Get the center for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\r\n     */\r\n    getSplatCenter = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outCenter) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.splatBufferTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the scale and rotation for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\r\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\r\n     */\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outScale, outRotation) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.splatBufferTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the color for a splat\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\r\n     */\r\n    getSplatColor = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outColor) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.splatBufferTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.splatBuffers[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\r\n    }\r\n\r\n    getSplatBufferIndexForSplat(globalIndex) {\r\n        return this.globalSplatIndexToSplatBufferIndexMap[globalIndex];\r\n    }\r\n\r\n    getSplatBufferTransformForSplat(globalIndex) {\r\n        return this.splatBufferTransforms[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    static getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n}\r\n","export class Constants {\r\n\r\n    static DepthMapRange = 1 << 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n\r\n}\r\n","import SorterWasm from './sorter.wasm';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let modelViewProjOffset;\r\n    let countsZero;\r\n\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, modelViewProj, usePrecomputedDistances) {\r\n        const sortStartTime = performance.now();\r\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\r\n        new Int32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\r\n                                         sortedIndexesOffset, Constants.DepthMapRange, splatSortCount,\r\n                                         splatRenderCount, splatCount, usePrecomputedDistances);\r\n        const sortEndTime = performance.now();\r\n\r\n        self.postMessage({\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': sortEndTime - sortStartTime\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\r\n            self.postMessage({\r\n                'sortSetupComplete': true,\r\n            });\r\n        } else if (e.data.sort) {\r\n            const renderCount = e.data.sort.splatRenderCount || 0;\r\n            const sortCount = e.data.sort.splatSortCount || 0;\r\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, e.data.sort.usePrecomputedDistances);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = Constants.BytesPerInt * 4;\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForViewProjMatrix = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForPrecomputedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForViewProjMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired * 2,\r\n                        maximum: totalPagesRequired * 4,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForViewProjMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                self.postMessage({\r\n                    'sortSetupPhase1Complete': true,\r\n                    'indexesToSortBuffer': wasmMemory,\r\n                    'indexesToSortOffset': indexesToSortOffset,\r\n                    'sortedIndexesBuffer': wasmMemory,\r\n                    'sortedIndexesOffset': sortedIndexesOffset,\r\n                    'precomputedDistancesBuffer': wasmMemory,\r\n                    'precomputedDistancesOffset': precomputedDistancesOffset\r\n                });\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    const sorterWasmBinaryString = atob(SorterWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'DepthMapRange': Constants.DepthMapRange,\r\n                'MemoryPageSize': Constants.MemoryPageSize\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0017\u0003`\u0000\u0000`\f\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0004\u0003\u0003\u0000\u0001\u000b�\u0004\u0002\u0002{\u0002} \t \bk!\n\u0002@ \u000b\u0004@A����\u0007!\u000bA����x!\b \t \nM\r\u0001 \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \u000b \u0001 \u000bH\u001b!\u000b \u0001 \b \u0001 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\f\u0001\u000bA����\u0007!\u000bA����x!\b \t \nM\r\u0000 \u0005A(j \u0005A\u0018j \u0005�\t\u0002\b�V\u0002\u0000\u0001�V\u0002\u0000\u0002!\r \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \r��\u0001\"\f�\u001b\u0000 \f�\u001b\u0001j \f�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000b \u0002 \u000bH\u001b!\u000b \u0002 \b \u0002 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\u000b \t \nK\u0004@ \u0007A\u0001k� \b� \u000b���!\u000e \n!\b\u0003@\u0002 \u000e \u0003 \bA\u0002tj\"\u0001(\u0002\u0000 \u000bk��\"\u000f�C\u0000\u0000\u0000O]\u0004@ \u000f�\f\u0001\u000bA����x\u000b!\u0005 \u0001 \u00056\u0002\u0000 \u0004 \u0005A\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \bA\u0001j\"\b \tG\r\u0000\u000b\u000b \u0007A\u0002O\u0004@ \u0004(\u0002\u0000!\bA\u0001!\u000b\u0003@ \u0004 \u000bA\u0002tj\"\u0001 \u0001(\u0002\u0000 \bj\"\b6\u0002\u0000 \u000bA\u0001j\"\u000b \u0007G\r\u0000\u000b\u000b \nA\u0000J\u0004@ \n!\u000b\u0003@ \u0006 \u000bA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000bA\u0001J!\u0002 \u0001!\u000b \u0002\r\u0000\u000b\u000b \t \nJ\u0004@ \t!\u000b\u0003@ \u0006 \t \u0004 \u0003 \u000bA\u0001k\"\u000bA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \u000bH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './PlyLoader.js';\r\nimport { SplatLoader } from './SplatLoader.js';\r\nimport { LoadingSpinner } from './LoadingSpinner.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime } from './Util.js';\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\n\r\n/**\r\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\r\n * that performs the sort for its splats.\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\r\n        // when the viewer uses its own camera).\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n\r\n        // The camera's initial position (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n\r\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\r\n        this.dropInMode = options.dropInMode || false;\r\n\r\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\r\n        if (options.selfDrivenMode === undefined) options.selfDrivenMode = true;\r\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n\r\n        // parent element of the Three.js renderer canvas\r\n        this.rootElement = options.rootElement;\r\n\r\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\r\n        // at a small cost to visual quality\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\r\n\r\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures,\r\n        // instead of 32-bit.\r\n        if (options.halfPrecisionCovariancesOnGPU === undefined) options.halfPrecisionCovariancesOnGPU = true;\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU;\r\n\r\n        // If 'scene' is valid, it will be rendered by the viewer along with the splat scene\r\n        this.scene = options.scene;\r\n        // Allows for usage of an external Three.js renderer\r\n        this.renderer = options.renderer;\r\n        // Allows for usage of an external Three.js camera\r\n        this.camera = options.camera;\r\n        this.controls = null;\r\n\r\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\r\n        // Currently this means pre-computing splat distances from the camera on the GPU\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\r\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\r\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\r\n            else this.gpuAcceleratedSort = true;\r\n        }\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n\r\n        this.splatMesh = null;\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderingInitialized = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n        this.infoPanelCells = {};\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n\r\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\r\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\r\n\r\n        this.initialized = false;\r\n        if (!this.dropInMode) this.init();\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\r\n            }\r\n        }\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        this.getRenderDimensions(renderDimensions);\r\n\r\n        if (!this.usingExternalCamera) {\r\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n        }\r\n\r\n        if (!this.usingExternalRenderer) {\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n\r\n            const resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n            });\r\n            resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n        this.scene = this.scene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.scene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        if (this.useBuiltInControls) {\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n            this.controls.listenToKeyEvents(window);\r\n            this.controls.rotateSpeed = 0.5;\r\n            this.controls.maxPolarAngle = Math.PI * .75;\r\n            this.controls.minPolarAngle = 0.1;\r\n            this.controls.enableDamping = true;\r\n            this.controls.dampingFactor = 0.05;\r\n            this.controls.target.copy(this.initialCameraLookAt);\r\n            this.rootElement.addEventListener('pointermove', this.onMouseMove.bind(this), false);\r\n            this.rootElement.addEventListener('pointerdown', this.onMouseDown.bind(this), false);\r\n            this.rootElement.addEventListener('pointerup', this.onMouseUp.bind(this), false);\r\n            window.addEventListener('keydown', this.onKeyDown.bind(this), false);\r\n        }\r\n\r\n        this.setupInfoPanel();\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyP':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.style.display = 'block';\r\n                    } else {\r\n                        this.infoPanel.style.display = 'none';\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const clickOffset = new THREE.Vector2();\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (wasClick) {\r\n                this.onMouseClick(mouse);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseClick(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n        this.checkForFocalPointChange();\r\n    }\r\n\r\n    checkForFocalPointChange = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function() {\r\n            if (!this.transitioningCameraTarget) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const intersectionPoint = outHits[0].origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    setupInfoPanel() {\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.style.position = 'absolute';\r\n        this.infoPanel.style.padding = '10px';\r\n        this.infoPanel.style.backgroundColor = '#cccccc';\r\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\r\n        this.infoPanel.style.zIndex = 100;\r\n        this.infoPanel.style.width = '375px';\r\n        this.infoPanel.style.fontFamily = 'arial';\r\n        this.infoPanel.style.fontSize = '10pt';\r\n        this.infoPanel.style.textAlign = 'left';\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime']\r\n        ];\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.style.width = '110px';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n\r\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanel.style.display = 'none';\r\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\r\n    }\r\n\r\n    updateSplatMeshUniforms = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\r\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\r\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\r\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\r\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Load a splat scene into the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255). Defaults to 1.\r\n     *\r\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position.\r\n     *                                     Defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion.\r\n     *                                     Defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {Promise}\r\n     */\r\n    loadFile(path, options = {}) {\r\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\r\n        return new Promise((resolve, reject) => {\r\n            if (options.showLoadingSpinner) this.loadingSpinner.show();\r\n            const downloadProgress = (percent, percentLabel) => {\r\n                if (options.showLoadingSpinner) {\r\n                    if (percent == 100) {\r\n                        this.loadingSpinner.setMessage(`Download complete!`);\r\n                    } else {\r\n                        const suffix = percentLabel ? `: ${percentLabel}` : `...`;\r\n                        this.loadingSpinner.setMessage(`Downloading${suffix}`);\r\n                    }\r\n                }\r\n                if (options.onProgress) options.onProgress(percent, percentLabel, 'downloading');\r\n            };\r\n            this.loadFileToSplatBuffer(path, options.splatAlphaRemovalThreshold, downloadProgress)\r\n            .then((splatBuffer) => {\r\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\r\n                if (options.onProgress) options.onProgress(0, '0%', 'processing');\r\n                const splatBufferOptions = {\r\n                    'rotation': options.rotation || options.orientation,\r\n                    'position': options.position,\r\n                    'scale': options.scale,\r\n                    'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n                };\r\n                this.loadSplatBuffersIntoMesh([splatBuffer], [splatBufferOptions], options.showLoadingSpinner).then(() => {\r\n                    if (options.onProgress) options.onProgress(100, '100%', 'processing');\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                reject(new Error(`Viewer::loadFile -> Could not load file ${path}`));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load multiple splat scenes into the viewer.\r\n     * @param {Array<object>} files Array of per-file options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255). Defaults to 1.\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position.\r\n     *                                     Defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion.\r\n     *                                     Defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {Promise}\r\n     */\r\n    loadFiles(files, showLoadingSpinner = true, onProgress = undefined) {\r\n        return new Promise((resolve, reject) => {\r\n            const fileCount = files.length;\r\n            const percentComplete = [];\r\n            if (showLoadingSpinner) this.loadingSpinner.show();\r\n            const downloadProgress = (fileIndex, percent, percentLabel) => {\r\n                percentComplete[fileIndex] = percent;\r\n                let totalPercent = 0;\r\n                for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n                totalPercent = totalPercent / fileCount;\r\n                percentLabel = `${totalPercent.toFixed(2)}%`;\r\n                if (showLoadingSpinner) {\r\n                    if (totalPercent == 100) {\r\n                        this.loadingSpinner.setMessage(`Download complete!`);\r\n                    } else {\r\n                        this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\r\n                    }\r\n                }\r\n                if (onProgress) onProgress(totalPercent, percentLabel, 'downloading');\r\n            };\r\n\r\n            const downLoadPromises = [];\r\n            for (let i = 0; i < files.length; i++) {\r\n                const meshOptionsForFile = files[i] || {};\r\n                const downloadPromise = this.loadFileToSplatBuffer(files[i].path, meshOptionsForFile.splatAlphaRemovalThreshold,\r\n                                                                   downloadProgress.bind(this, i));\r\n                downLoadPromises.push(downloadPromise);\r\n            }\r\n\r\n            Promise.all(downLoadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingSpinner) this.loadingSpinner.hide();\r\n                if (onProgress) options.onProgress(0, '0%', 'processing');\r\n                this.loadSplatBuffersIntoMesh(splatBuffers, files, showLoadingSpinner).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', 'processing');\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                reject(new Error(`Viewer::loadFiles -> Could not load one or more files.`));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\r\n     *                                            value (valid range: 0 - 255). Defaults to 1.\r\n     *\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {Promise}\r\n     */\r\n    loadFileToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined) {\r\n        const downloadProgress = (percent, percentLabel) => {\r\n            if (onProgress) onProgress(percent, percentLabel, 'downloading');\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            let fileLoadPromise;\r\n            if (SplatLoader.isFileSplatFormat(path)) {\r\n                fileLoadPromise = new SplatLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\r\n            } else if (path.endsWith('.ply')) {\r\n                fileLoadPromise = new PlyLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\r\n            } else {\r\n                reject(new Error(`Viewer::loadFileToSplatBuffer -> File format not supported: ${path}`));\r\n            }\r\n            fileLoadPromise\r\n            .then((splatBuffer) => {\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch(() => {\r\n                reject(new Error(`Viewer::loadFileToSplatBuffer -> Could not load file ${path}`));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load one or instances of SplatBuffer into the SplatMesh managed by the viewer and set up the sorting web worker.\r\n     * This function will terminate the existing sort worker (if there is one).\r\n     */\r\n    loadSplatBuffersIntoMesh = function() {\r\n\r\n        let loadPromise;\r\n        let loadCount = 0;\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], showLoadingSpinner = true) {\r\n            this.splatRenderingInitialized = false;\r\n            loadCount++;\r\n            const performLoad = () => {\r\n                return new Promise((resolve) => {\r\n                    if (showLoadingSpinner) {\r\n                        this.loadingSpinner.show();\r\n                        this.loadingSpinner.setMessage(`Processing splats...`);\r\n                    }\r\n                    window.setTimeout(() => {\r\n                        if (this.sortWorker) this.sortWorker.terminate();\r\n                        this.sortWorker = null;\r\n                        this.sortRunning = false;\r\n                        this.updateSplatMesh(splatBuffers, splatBufferOptions);\r\n                        this.setupSortWorker(this.splatMesh).then(() => {\r\n                            loadCount--;\r\n                            if (loadCount === 0) {\r\n                                if (showLoadingSpinner) this.loadingSpinner.hide();\r\n                                this.splatRenderingInitialized = true;\r\n                            }\r\n                            resolve();\r\n                        });\r\n                    }, 1);\r\n                });\r\n            };\r\n            if (!loadPromise) {\r\n                loadPromise = performLoad();\r\n            } else {\r\n                loadPromise = loadPromise.then(() => {\r\n                    return performLoad();\r\n                });\r\n            }\r\n            return loadPromise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Load one or instances of SplatBuffer into the SplatMesh managed by the viewer.\r\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255). Defaults to 1.\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position.\r\n     *                                     Defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion.\r\n     *                                     Defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     */\r\n    updateSplatMesh(splatBuffers, splatBufferOptions) {\r\n        if (!this.splatMesh) {\r\n            this.splatMesh = new SplatMesh(this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio, this.gpuAcceleratedSort);\r\n        }\r\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\r\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\r\n        allSplatBuffers.push(...splatBuffers);\r\n        allSplatBufferOptions.push(...splatBufferOptions);\r\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true);\r\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n        const splatCount = this.splatMesh.getSplatCount();\r\n        console.log(`Total splat count: ${splatCount}`);\r\n        this.splatMesh.frustumCulled = false;\r\n    }\r\n\r\n    /**\r\n     * Set up the splat sorting web worker.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\r\n     * @return {Promise}\r\n     */\r\n    setupSortWorker(splatMesh) {\r\n        return new Promise((resolve) => {\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const sortWorker = createSortWorker(splatCount);\r\n            sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    this.lastSortTime = e.data.sortTime;\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    console.log('Sorting web worker WASM setup complete.');\r\n                    sortWorker.postMessage({\r\n                        'centers': this.splatMesh.getIntegerCenters(true).buffer\r\n                    });\r\n                    this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                   e.data.sortedIndexesOffset, splatCount);\r\n                    this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                   e.data.indexesToSortOffset, splatCount);\r\n                    this.sortWorkerPrecomputedDistances = new Int32Array(e.data.precomputedDistancesBuffer,\r\n                                                                         e.data.precomputedDistancesOffset, splatCount);\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                } else if (e.data.sortSetupComplete) {\r\n                    console.log('Sorting web worker ready.');\r\n                    this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, splatCount);\r\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n                    this.sortWorker = sortWorker;\r\n                    resolve();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start self-driven mode\r\n     */\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop self-driven mode\r\n     */\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            cancelAnimationFrame();\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode) {\r\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        this.render();\r\n    }\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderingInitialized) return;\r\n            const hasRenderables = (scene) => {\r\n                for (let child of scene.children) {\r\n                    if (child.visible) return true;\r\n                }\r\n                return false;\r\n            };\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            this.renderer.autoClear = false;\r\n            if (hasRenderables(this.scene)) this.renderer.render(this.scene, this.camera);\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    update(renderer, camera) {\r\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\r\n        if (!this.initialized || !this.splatRenderingInitialized) return;\r\n        if (this.controls) this.controls.update();\r\n        this.updateSplatSort();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMeshUniforms();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfoPanel();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    updateForDropInMode(renderer, camera) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n        this.init();\r\n    }\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            const calcDelta = currentTime - lastCalcTime;\r\n            if (calcDelta >= 1.0) {\r\n                this.currentFPS = frameCount;\r\n                frameCount = 0;\r\n                lastCalcTime = currentTime;\r\n            } else {\r\n                frameCount++;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n\r\n        return function() {\r\n            this.renderer.getSize(currentRendererSize);\r\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                if (!this.usingExternalCamera) {\r\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    this.camera.updateProjectionMatrix();\r\n                }\r\n                lastRendererSize.copy(currentRendererSize);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            const fadeInSpeed = 10.0;\r\n            const fadeOutSpeed = 2.5;\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfoPanel = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            const cameraPos = this.camera.position;\r\n            const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\r\n\r\n            const cameraLookAt = this.controls.target;\r\n            const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n\r\n            const cameraUp = this.camera.up;\r\n            const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\r\n\r\n            if (this.showMeshCursor) {\r\n                const cursorPos = this.sceneHelper.meshCursor.position;\r\n                const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\r\n                this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\r\n            } else {\r\n                this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\r\n            }\r\n\r\n            this.infoPanelCells.fps.innerHTML = this.currentFPS;\r\n            this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n            const renderPct = this.splatRenderCount / splatCount * 100;\r\n            this.infoPanelCells.renderSplatCount.innerHTML =\r\n                `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\r\n\r\n            this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    updateSplatSort = function() {\r\n\r\n        const mvpMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedSorts = [];\r\n        let runCount = 0;\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return function(force = false, gatherAllNodes = false) {\r\n            if (this.sortRunning) return;\r\n            if (!this.initialized || !this.splatRenderingInitialized) return;\r\n\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!force && queuedSorts.length === 0 && runCount > 0) {\r\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\r\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\r\n            }\r\n\r\n            this.sortRunning = true;\r\n            this.splatRenderCount = this.gatherSceneNodesForSort(gatherAllNodes);\r\n\r\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\r\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\r\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\r\n\r\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\r\n                this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\r\n            }\r\n            if (queuedSorts.length === 0) {\r\n                for (let partialSort of partialSorts) {\r\n                    if (angleDiff < partialSort.angleThreshold) {\r\n                        for (let sortFraction of partialSort.sortFractions) {\r\n                            queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                queuedSorts.push(this.splatRenderCount);\r\n            }\r\n            const sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\r\n\r\n            cameraPositionArray[0] = this.camera.position.x;\r\n            cameraPositionArray[1] = this.camera.position.y;\r\n            cameraPositionArray[2] = this.camera.position.z;\r\n            this.sortWorker.postMessage({\r\n                sort: {\r\n                    'modelViewProj': SplatMesh.getIntegerMatrixArray(mvpMatrix),\r\n                    'cameraPosition': cameraPositionArray,\r\n                    'splatRenderCount': this.splatRenderCount,\r\n                    'splatSortCount': sortCount,\r\n                    'usePrecomputedDistances': this.gpuAcceleratedSort\r\n                }\r\n            });\r\n            if (queuedSorts.length === 0) {\r\n                lastSortViewPos.copy(this.camera.position);\r\n                lastSortViewDir.copy(sortViewDir);\r\n            }\r\n            runCount++;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Determine which splats to render by checking which are inside or close to the view frustum\r\n     */\r\n    gatherSceneNodesForSort = function() {\r\n\r\n        const nodeRenderList = [];\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        const MaximumDistanceToRender = 125;\r\n\r\n        return function(gatherAllNodes) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\r\n            tempMatrix4.multiply(this.splatMesh.matrixWorld);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n            let nodeRenderCount = 0;\r\n            let splatRenderCount = 0;\r\n            const nodeCount = splatTree.nodesWithIndexes.length;\r\n            for (let i = 0; i < nodeCount; i++) {\r\n                const node = splatTree.nodesWithIndexes[i];\r\n                tempVector.copy(node.center).applyMatrix4(tempMatrix4);\r\n                const distanceToNode = tempVector.length();\r\n                tempVector.normalize();\r\n\r\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                const ns = nodeSize(node);\r\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\r\n                    continue;\r\n                }\r\n                splatRenderCount += node.data.indexes.length;\r\n                nodeRenderList[nodeRenderCount] = node;\r\n                node.data.distanceToNode = distanceToNode;\r\n                nodeRenderCount++;\r\n            }\r\n\r\n            nodeRenderList.length = nodeRenderCount;\r\n            nodeRenderList.sort((a, b) => {\r\n                if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                else return 1;\r\n            });\r\n\r\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n            for (let i = 0; i < nodeRenderCount; i++) {\r\n                const node = nodeRenderList[i];\r\n                const windowSizeInts = node.data.indexes.length;\r\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                destView.set(node.data.indexes);\r\n                currentByteOffset -= windowSizeBytes;\r\n            }\r\n\r\n            return splatRenderCount;\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\n/**\r\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\r\n * any other Three.js scene object (Mesh, Object3D, etc.)\r\n */\r\nexport class DropInViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.ignoreDevicePixelRatio = false;\r\n        options.dropInMode = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n\r\n        this.callbackMesh = DropInViewer.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\r\n\r\n    }\r\n\r\n    /**\r\n     * Load a splat scene into the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255). Defaults to 1.\r\n     *\r\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position.\r\n     *                                     Defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion.\r\n     *                                     Defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {Promise}\r\n     */\r\n    addSceneFromFile(path, options = {}) {\r\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\r\n        return this.viewer.loadFile(path, options).then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load multiple splat scenes into the viewer.\r\n     * @param {Array<object>} files Array of per-file options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255). Defaults to 1.\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position.\r\n     *                                     Defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion.\r\n     *                                     Defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\r\n     * @return {Promise}\r\n     */\r\n    addScenesFromFiles(files, showLoadingSpinner) {\r\n        if (showLoadingSpinner !== false) showLoadingSpinner = true;\r\n        return this.viewer.loadFiles(files, showLoadingSpinner).then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n    }\r\n\r\n    static onBeforeRender(viewer, renderer, scene, camera) {\r\n        viewer.update(renderer, camera);\r\n    }\r\n\r\n    static createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["fbf","SplatBuffer","static","BytesPerCenter","BytesPerScale","BytesPerColor","BytesPerRotation","ScaleRange","constructor","bufferData","this","headerBufferData","ArrayBuffer","HeaderSizeBytes","headerArrayUint8","Uint8Array","headerArrayUint32","Uint32Array","headerArrayFloat32","Float32Array","set","versionMajor","versionMinor","headerExtraK","compressionLevel","splatCount","bucketSize","bucketCount","bucketBlockSize","halfBucketBlockSize","bytesPerBucket","compressionScaleRange","CompressionLevels","compressionScaleFactor","dataBufferSizeBytes","byteLength","splatBufferData","bytesPerCenter","bytesPerScale","bytesPerColor","bytesPerRotation","bytesPerSplat","bind","linkBufferArrays","FloatArray","Uint16Array","centerArray","CenterComponentCount","scaleArray","ScaleComponentCount","colorArray","ColorComponentCount","rotationArray","RotationComponentCount","bucketsBase","f","THREE","DataUtils","fromHalfFloat","getHeaderBufferData","getSplatBufferData","getSplatCount","getSplatCenter","index","outCenter","transform","bucket","centerBase","sf","sr","bucketIndex","Math","floor","x","y","z","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","outScale","outRotation","scaleBase","rotationBase","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","colorBase","fillSplatCenterArray","outCenterArray","destOffset","center","i","centerSrcBase","centerDestBase","fillSplatCovarianceArray","covarianceArray","scale","rotation","Quaternion","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","tempMatrix4","setFromMatrix4","transpose","premultiply","covBase","CovarianceSizeFloats","elements","fillSplatColorArray","outColorArray","colorSrcBase","colorDestBase","floatView","int32View","Int32Array","buffer","uintEncodedFloat","fetchWithProgress","path","onProgress","Promise","resolve","reject","fetch","then","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","error","clamp","val","min","max","getCurrentTime","performance","now","UncompressedSplatArray","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","f_dc_0","f_dc_1","f_dc_2","opacity","addSplat","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","SplatCompressor","minimumAlpha","blockSize","createEmptyUncompressedSplatArray","uncompressedSplatArrayToSplatBuffer","splatArray","validSplats","alpha","buckets","computeBucketsForUncompressedSplatArray","paddedSplatCount","headerSize","header","centerBuffer","scaleBuffer","colorBuffer","rotationBuffer","blockHalfSize","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatIndex","fromArray","splats","row","invalidSplat","rot","quat","normalize","w","thf","toHalfFloat","sub","round","rgba","Uint8ClampedArray","bucketsSize","splatDataBufferSize","unifiedBufferSize","unifiedBuffer","bucketArray","base","halfBlockSize","dimensions","yBlocks","ceil","zBlocks","blockCenter","fullBuckets","partiallyFullBuckets","xBlock","yBlock","zBlock","bucketId","toArray","hasOwnProperty","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","console","log","readChunkSize","Error","headerChunk","decode","endHeaderTestChunk","includes","headerLines","split","propertyTypes","line","trim","startsWith","splatCountMatch","match","propertyMatch","propertyType","vertexByteOffset","indexOf","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToSplatBuffer","startTime","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","type","exp","SH_C0","splatBuffer","endTime","PlyLoader","fetchFile","fileName","catch","err","loadFromURL","plyFileData","SplatLoader","downLoadLink","isFileSplatFormat","isCustomSplatFormat","isStandardSplatFormat","endsWith","splatCompressor","parseStandardSplatToUncompressedSplatArray","inBuffer","inCenterSizeBytes","inScaleSizeBytes","inColorSizeBytes","inBase","inCenter","inScale","inColor","inRotation","setFromBuffer","downloadFile","headerData","splatData","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","super","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","dispose","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","spinnerDivContainerOuter","className","display","spinnerDivContainer","spinnerDiv","messageDiv","innerHTML","show","hide","setContainer","removeChild","zIndex","setMessage","msg","ArrowHelper","Object3D","dir","color","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","material","source","geometry","SceneHelper","scene","splatRenderTarget","renderTargetCopyMaterial","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","updateSplatRenderTargetForRenderDimensions","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","children","forEach","child","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","sphereMesh","updateFocusMarker","viewport","matrixWorld","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","debugRoot","createDebugMeshes","secondaryDebugRoot","createSecondaryDebugMeshes","renderOrder","debugMeshRoot","createMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","point","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","t","Hit","hitClone","Raycaster","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","localRay","splatMesh","outHits","splatTree","getSplatTree","rootNode","castRayAtSplatTreeNode","sort","a","hit","tempCenter","tempScale","tempRotation","tempHit","scaleEpsilon","node","boundingBox","indexes","splatGlobalIndex","idGen","SplatTreeNode","depth","id","Box3","SplatTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","addedIndexes","nodesWithIndexes","processSplatMesh","filterFunc","globalSplatIndexToLocalSplatIndexMap","globalSplatIndexToSplatBufferIndexMap","validSplatCount","processNode","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","j","containsPoint","childNode","countLeaves","leafCount","visitLeaves","visitFunc","visitLeavesFromNode","dummyGeometry","BufferGeometry","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","renderer","splatBuffers","splatBufferOptions","splatBufferTransforms","splatDataTextures","distancesTransformFeedback","program","centersBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","buildMaterial","covariancesTexture","centersColorsTexture","focal","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","alphaTest","NormalBlending","buildGeomtery","maxSplatCount","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildSplatBufferTransforms","options","positionArray","splatBufferTransform","compose","buildSplatIndexMaps","localSplatIndexMap","Map","splatBufferIndexMap","totalSplatCount","s","buildSplatTree","time","splatColor","Vector4","splatIndex","splatBufferIndex","getSplatBufferIndexForSplat","splatAlphaRemovalThreshold","timeEnd","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","build","keepExistingSplatBufferTransforms","disposeMeshData","getTotalSplatCountForSplatBuffers","indexMaps","setupDistancesComputationTransformFeedback","resetDataFromSplatBuffer","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","uploadSplatDataToTextures","updateGPUCentersBufferForDistancesComputation","covariances","centers","colors","fillSplatDataArrays","paddedCovariances","DataTexture","RGFormat","HalfFloatType","FloatType","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","RGBAIntegerFormat","internalFormat","size","centerColors","updateRenderIndexes","globalIndexes","renderSplatCount","attributes","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","getSplatDataTextures","gl","getContext","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","currentRenderer","currentSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","VERTEX_SHADER","FRAGMENT_SHADER","errors","getShaderInfoLog","currentVao","getParameter","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","DYNAMIC_COPY","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","intCenters","getIntegerCenters","STATIC_DRAW","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","iViewProjMatrix","getIntegerMatrixArray","iViewProj","enable","RASTERIZER_DISCARD","uniform3i","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSplatBufferTransformForSplat","padFour","floatCenters","componentCount","matrixElements","intMatrixArray","Constants","sortWorker","self","wasmInstance","wasmMemory","indexesToSortOffset","sortedIndexesOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","onmessage","e","postMessage","sortSetupComplete","renderCount","splatRenderCount","splatSortCount","modelViewProj","usePrecomputedDistances","sortStartTime","DepthMapRange","exports","sortIndexes","sortEndTime","sortDone","sortTime","init","CENTERS_BYTES_PER_ENTRY","BytesPerInt","sorterWasmBytes","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForViewProjMatrix","BytesPerFloat","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","createSortWorker","worker","Worker","toString","sorterWasmBinaryString","atob","charCodeAt","Viewer","cameraUp","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","window","controls","gpuAcceleratedSort","isMobile","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","selfDrivenModeRunning","splatRenderingInitialized","raycaster","infoPanel","infoPanelCells","currentFPS","lastSortTime","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","loadingSpinner","usingExternalCamera","usingExternalRenderer","initialized","parentElement","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","precision","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","observe","Scene","onMouseUp","setupInfoPanel","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","padding","backgroundColor","border","fontFamily","fontSize","textAlign","layout","infoTable","layoutEntry","labelCell","spacerCell","infoCell","prepend","updateSplatMeshUniforms","projectionMatrix","loadFile","showLoadingSpinner","loadFileToSplatBuffer","suffix","orientation","loadSplatBuffersIntoMesh","loadFiles","files","fileCount","percentComplete","downloadProgress","fileIndex","totalPercent","downLoadPromises","meshOptionsForFile","downloadPromise","all","fileLoadPromise","loadPromise","loadCount","performLoad","setTimeout","terminate","updateSplatMesh","setupSortWorker","allSplatBuffers","allSplatBufferOptions","frustumCulled","sortCanceled","start","requestAnimationFrame","stop","cancelAnimationFrame","render","savedAuoClear","hasRenderables","updateForDropInMode","updateSplatSort","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","currentTime","lastRendererSize","currentRendererSize","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","lerp","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","cameraPos","cameraPosString","cameraPosition","cameraLookAt","cameraLookAtString","cameraUpString","cursorPos","cursorPosString","cursorPosition","fps","renderWindow","renderPct","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","runCount","partialSorts","angleThreshold","sortFractions","force","gatherAllNodes","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","gatherSceneNodesForSort","partialSort","sortFraction","sortCount","shift","nodeRenderList","tempVectorYZ","tempVectorXZ","tempVector","tempMax","nodeSize","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","navigator","userAgent","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","addSceneFromFile","addScenesFromFiles","colorWrite","mesh"],"mappings":"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"}